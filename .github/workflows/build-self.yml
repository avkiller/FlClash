name: build for fireworld

on:
  # push:
  #   tags:
  #     - 'v*'
  workflow_dispatch:
env:
  IS_STABLE: ${{ !contains(github.ref, '-') }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
            arch: amd64
          # - platform: linux
          #   os: ubuntu-22.04
          #   arch: amd64
          - platform: macos
            os: macos-13
            arch: amd64
          # - platform: macos
          #   os: macos-latest
          #   arch: arm64
          # - platform: windows
          #   os: windows-11-arm
          #   arch: arm64
          # - platform: linux
          #   os: ubuntu-24.04-arm
          #   arch: arm64

    steps:
      - name: Setup rust
        if: startsWith(matrix.os, 'windows-11-arm')
        run: |
          Invoke-WebRequest -Uri "https://win.rustup.rs/aarch64" -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-toolchain stable
          $cargoPath = "$env:USERPROFILE\.cargo\bin"
          Add-Content $env:GITHUB_PATH $cargoPath

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Android Signing
        if: startsWith(matrix.platform,'android')
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/local.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/local.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/local.properties

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache-dependency-path: |
            core/go.sum

      - name: Setup Flutter Master
        if: startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm')
        uses: subosito/flutter-action@v2
        with:
          channel: 'master'
          cache: true
      - name: Setup Flutter
        if: ${{ !(startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm')) }}
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      #          flutter-version: 3.29.3

      - name: Get Flutter Dependency
        run: flutter pub get

      - name: Setup
        run: dart setup.dart ${{ matrix.platform }} ${{ matrix.arch && format('--arch {0}', matrix.arch) }} ${{ env.IS_STABLE == 'true' && '--env stable' || '' }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) }}
          path: ./dist
          overwrite: true
  upload:
    permissions: write-all
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          pattern: artifact-*
          merge-multiple: true

      - name: Generate sha256
        if: env.IS_STABLE == 'true'
        run: |
          cd ./dist
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done  

      - name: Get tag version
        run: |
          # 如果是手动触发 (workflow_dispatch)
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            # 获取所有 Tag（确保包含远程 Tag）
            git fetch --tags
            # 按版本号排序获取最新 Tag（兼容语义化版本）
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "nightly")

            # 去掉 Tag 名称中的 'v' 前缀
            VERSION="${LATEST_TAG}"
          else
           # 原有逻辑：从推送的 Tag 中提取版本号
           TAG_VERSION="${GITHUB_REF##*/}"
           VERSION="${TAG_VERSION}"
          fi

          # 处理无 Tag 的情况（可选：报错或默认值）
          if [ -z "$VERSION" ]; then
            echo "::error::No valid tag found!"
            VERSION="0.0.0"
          fi

          # 将信息写入环境变量
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          # echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Release
        if: ${{ env.IS_STABLE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          files: ./dist/*
          # body_path: './release.md'
